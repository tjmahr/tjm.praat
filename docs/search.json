[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tristan Mahr. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mahr T (2023). tjm.praat: Miscellaneous 'Praat' Scripts. R package version 0.1.0, https://github.com/tjmahr/tjm.praat.","code":"@Manual{,   title = {tjm.praat: Miscellaneous 'Praat' Scripts},   author = {Tristan Mahr},   year = {2023},   note = {R package version 0.1.0},   url = {https://github.com/tjmahr/tjm.praat}, }"},{"path":"/index.html","id":"tjmpraat","dir":"","previous_headings":"","what":"Miscellaneous Praat Scripts","title":"Miscellaneous Praat Scripts","text":"goal tjm.praat make easier run Praat scripts part R workflow. package provides one main function wrap_praat_script(), plus scripts designed work function. name tjm.praat indicates package houses (tjm‚Äôs) .praat files.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Miscellaneous Praat Scripts","text":"can install tjm.praat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tjmahr/tjm.praat\")"},{"path":"/index.html","id":"example-of-wrapping-a-praat-script-as-a-function","dir":"","previous_headings":"","what":"Example of wrapping a Praat script as a function","title":"Miscellaneous Praat Scripts","text":"Let‚Äôs make function draws Praat textgrid saves image .png file. First, let‚Äôs make minimal working Praat script, store string R. use glue::glue() cleans leading trailing blank lines indentations string. Now, can convert script R function. tell wrap_praat_script() return last argument script (png_out$ example) back R script runs. Now set file arguments script. First, need textgrid file. Let‚Äôs use textgrid bundled package. textgrid shows results forced-alignment phrase ‚Äúbird house‚Äù. also need place save image. ‚Äôm going use temporary file. Shoot. just forgot arguments script. ‚Äôs okay, can print function view form. Oh ‚Äôs right. Width height. Now, let‚Äôs call function view resulting image.","code":"script <- glue::glue(   '   form Draw a textgrid     sentence Textgrid_in     integer Width 6     integer Height 4     sentence Png_out   endform    Read from file: textgrid_in$   Select outer viewport: 0, width, 0, height      Draw: 0, 0, \"yes\", \"yes\", \"yes\"   Save as 300-dpi PNG file: png_out$   ' ) library(tjm.praat)  # Find where Praat lives on my machine praat_location <- Sys.which(\"praat\")  f_draw_textgrid <- wrap_praat_script(   praat_location = praat_location,    script_code_to_run = script,   return = \"last-argument\" ) tg_in <- system.file(   \"demo-textgrids/birdhouse.TextGrid\",    package = \"tjm.praat\" ) png_out <- tempfile(\"birdhouse\", fileext = \".png\") f_draw_textgrid #> # <wrapped_praat_script> #> # <returning: last-argument> #> form Draw a textgrid #>   sentence Textgrid_in #>   integer Width 6 #>   integer Height 4 #>   sentence Png_out #> endform #> # ... with 6 more lines  print(f_draw_textgrid, condense = FALSE) #> # <wrapped_praat_script> #> # <returning: last-argument> #> form Draw a textgrid #>   sentence Textgrid_in #>   integer Width 6 #>   integer Height 4 #>   sentence Png_out #> endform #>  #> Read from file: textgrid_in$ #> Select outer viewport: 0, width, 0, height #>  #> Draw: 0, 0, \"yes\", \"yes\", \"yes\" #> Save as 300-dpi PNG file: png_out$ result <- f_draw_textgrid(tg_in, 7, 2, png_out) magick::image_read(result)"},{"path":"/index.html","id":"example-using-bundled-praat-scripts","dir":"","previous_headings":"","what":"Example using bundled Praat scripts","title":"Miscellaneous Praat Scripts","text":"bundled Praat scripts package. minimal written assumption scripts ever called via Praat script. one projects, needed extract silences identified forced alignment algorithm. Thus, needed three things textgrid: Copy tier speech-sound intervals. Convert speech-sound labels ‚Äúsilence‚Äù ‚Äúsounding‚Äù. Merged adjacent ‚Äúsilence‚Äù intervals ‚Äúsounding‚Äù intervals together. wrote script steps. last-argument script Praat textgrid, can pipe wrapped-script functions . Let‚Äôs apply scripts original example textgrid.  Now, little purrr magic, run workflow thousands textgrids üòâ. Finally, little test, want make sure package works spaces appear file names.","code":"f_duplicate <- wrap_praat_script(praat_location, duplicate_tier) f_relabel   <- wrap_praat_script(praat_location, convert_tier_to_silences) f_merge     <- wrap_praat_script(praat_location, merge_duplicate_intervals) tg_out <- tempfile(\"demo\", fileext = \".TextGrid\") png_out <- tempfile(\"demo\", fileext = \".png\")  tg_result <- tg_in |>    f_duplicate(\"phones\", \"pauses\", \"last\", tg_out) |>    f_relabel(\"pauses\", \"^$|sil|sp\", tg_out) |>   f_merge(\"pauses\", tg_out)  png_result <- f_draw_textgrid(tg_result, 7, 2, png_out)  magick::image_read(png_result) tg_out <- tempfile(\"demo with spaces in name\", fileext = \".TextGrid\") png_out <- tempfile(\"demo with spaces in name\", fileext = \".png\")  tg_result <- tg_in |>    f_duplicate(\"phones\", \"pauses\", \"last\", tg_out) |>    f_relabel(\"pauses\", \"^$|sil|sp\", tg_out) |>    f_merge(\"pauses\", tg_out)  png_result <- f_draw_textgrid(tg_result, 3.5, 2, png_out) png_result #> [1] \"C:\\\\Users\\\\Tristan\\\\AppData\\\\Local\\\\Temp\\\\RtmpWgF5OH\\\\demo with spaces in name3f8d5b7c27.png\""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Tristan Mahr Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/bind_tiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind (copy) tiers from one textgrid onto another textgrid ‚Äî bind_tiers","title":"Bind (copy) tiers from one textgrid onto another textgrid ‚Äî bind_tiers","text":"name meant evoke dplyr::bind_rows() \"stacks\" one dataframe top another. pull selected tiers one textgrid bind onto another one.","code":""},{"path":"/reference/bind_tiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind (copy) tiers from one textgrid onto another textgrid ‚Äî bind_tiers","text":"","code":"bind_tiers"},{"path":"/reference/bind_tiers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bind (copy) tiers from one textgrid onto another textgrid ‚Äî bind_tiers","text":"Praat script textgrid_receiver path textgrid file update (attach tiers onto) textgrid_sender path textgrid file extract tiers tiers_to_pull comma-separated names tiers extract textgrid_out path textgrid file create","code":""},{"path":"/reference/bind_tiers.html","id":"example-usage","dir":"Reference","previous_headings":"","what":"Example usage","title":"Bind (copy) tiers from one textgrid onto another textgrid ‚Äî bind_tiers","text":"","code":"library(tjm.praat)  # Use the PATH to find praat praat_path <- Sys.which(\"praat\")  # The two textgrids we want to bind together tg <- system.file(   \"demo-textgrids/birdhouse.TextGrid\",   package = \"tjm.praat\" ) tg_data <- readtextgrid::read_textgrid(tg)  tg2 <- system.file(   \"demo-textgrids/birdhouse2.TextGrid\",   package = \"tjm.praat\" ) tg2_data <- readtextgrid::read_textgrid(tg2)   tg_out <- tempfile(\"test\", fileext = \".TextGrid\")  # We want to put \"p2fa-words\" and \"p2fa-phones\" on to the first textgrid unique(tg_data$tier_name) #> [1] \"words\"  \"phones\" unique(tg2_data$tier_name) #> [1] \"p2fa-words\"  \"p2fa-phones\"  f_bind_tiers <- wrap_praat_script(   praat_location = praat_path,   script_code_to_run = bind_tiers,   return = \"last-argument\" )  tg_out <- f_bind_tiers(tg, tg2, \"p2fa-words,p2fa-phones\", tg_out)  tg_out_data <- readtextgrid::read_textgrid(tg_out) unique(tg_out_data$tier_name) #> [1] \"words\"       \"phones\"      \"p2fa-words\"  \"p2fa-phones\""},{"path":"/reference/bind_tiers.html","id":"praat-source-code","dir":"Reference","previous_headings":"","what":"Praat source code","title":"Bind (copy) tiers from one textgrid onto another textgrid ‚Äî bind_tiers","text":"","code":"# <wrapped_praat_script>  # <returning: last-argument>  form Copy tiers from one textgrid (sender) onto another (reciever)    sentence Textgrid_receiver    sentence Textgrid_sender    sentence Tiers_to_pull    sentence Textgrid_out  endform    Read from file: textgrid_receiver$  id_tg_receiver = selected(\"TextGrid\")    Read from file: textgrid_sender$  id_tg_sender = selected(\"TextGrid\")    Create Strings as tokens: tiers_to_pull$, \",\"  id_str_tiers_to_pull = selected(\"Strings\")    @stringsIter: \"tiers\", id_str_tiers_to_pull, \"initialize\"    while stringsIter.tiers.has_next    @stringsIter(\"tiers\", id_str_tiers_to_pull, \"next\")    selectObject: id_tg_sender      # Pull tier    @findNumberForTier: stringsIter.tiers.next$    Extract one tier: findNumberForTier.result    id_tier = selected(\"TextGrid\")      # Bind it    selectObject: id_tg_receiver    plusObject: id_tier    Merge    id_tg_temp = selected(\"TextGrid\")      # Clean up    selectObject: id_tg_receiver    plusObject: id_tier    Remove      id_tg_receiver = id_tg_temp  endwhile    selectObject: id_tg_receiver  Save as text file: textgrid_out$      # Find the number of the (last) tier with a given name  procedure findNumberForTier: .target_tier$    .tiers = Get number of tiers    .result = 0      for .tier_i to .tiers      .tier_i_name$ = Get tier name: .tier_i        if .tier_i_name$ == .target_tier$          .result = .tier_i        endif    endfor    endproc    # An iterator for a list of strings  procedure stringsIter: .iter_name$, .id, .method$      selectObject: .id        # create a private namespace for this strings list iterator      .list$ = .iter_name$        if .method$ = \"initialize\"          .'.list$'.length = Get number of strings          .'.list$'.index = 0      endif        if .method$ = \"next\"          .'.list$'.index = .'.list$'.index + 1          .'.list$'.next$ = Get string: .'.list$'.index      endif        if .method$ = \"has_next\"          # .has_next is updated whenever procedure is invoked      endif        if .'.list$'.index < .'.list$'.length          .'.list$'.has_next = 1      else          .'.list$'.has_next = 0      endif  endproc"},{"path":"/reference/convert_tier_to_silences.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a textgrid tier into a ","title":"Convert a textgrid tier into a ","text":"Interval text matches silence pattern replaced \"silent\". others replaced \"sounding\".","code":""},{"path":"/reference/convert_tier_to_silences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a textgrid tier into a ","text":"","code":"convert_tier_to_silences"},{"path":"/reference/convert_tier_to_silences.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Convert a textgrid tier into a ","text":"Praat script textgrid_in path textgrid file read target_tier tier copy silence_regex regular expression (regex) used indentify silences. Current default ^$|sil|sp treats empty strings (^$) (|) string containing sil string containing sp silences. textgrid_out path textgrid file create","code":""},{"path":"/reference/convert_tier_to_silences.html","id":"example-usage","dir":"Reference","previous_headings":"","what":"Example usage","title":"Convert a textgrid tier into a ","text":"","code":"library(tjm.praat)  # Use the PATH to find praat praat_path <- Sys.which(\"praat\")  tg <- system.file(   \"demo-textgrids/merge-duplicate-intervals.TextGrid\",   package = \"tjm.praat\" )  tg_out <- tempfile(\"test\", fileext = \".TextGrid\")  # We have the phonemes and silences in \"bird house\" tg_data <- readtextgrid::read_textgrid(tg) tg_data[tg_data$tier_num == 2, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")] #> # A tibble: 10 x 4 #>    tier_name  xmin  xmax text  #>    <chr>     <dbl> <dbl> <chr> #>  1 phones     0     0.25 \"sil\" #>  2 phones     0.25  0.35 \"B\"   #>  3 phones     0.35  0.49 \"ER1\" #>  4 phones     0.49  0.52 \"D\"   #>  5 phones     0.52  0.55 \"sp\"  #>  6 phones     0.55  0.59 \"HH\"  #>  7 phones     0.59  1.04 \"AW1\" #>  8 phones     1.04  1.16 \"S\"   #>  9 phones     1.16  1.39 \"sp\"  #> 10 phones     1.39  1.41 \"\"  f_convert_tier_to_silences <- wrap_praat_script(   praat_location = praat_path,   script_code_to_run = convert_tier_to_silences,   return = \"last-argument\" )  tg_data2 <- tg |>    f_convert_tier_to_silences(\"phones\", \"^$|sil|sp\", tg_out) |>   readtextgrid::read_textgrid()  tg_data2[tg_data2$tier_num == 2, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")] #> # A tibble: 10 x 4 #>    tier_name  xmin  xmax text     #>    <chr>     <dbl> <dbl> <chr>    #>  1 phones     0     0.25 silent   #>  2 phones     0.25  0.35 sounding #>  3 phones     0.35  0.49 sounding #>  4 phones     0.49  0.52 sounding #>  5 phones     0.52  0.55 silent   #>  6 phones     0.55  0.59 sounding #>  7 phones     0.59  1.04 sounding #>  8 phones     1.04  1.16 sounding #>  9 phones     1.16  1.39 silent   #> 10 phones     1.39  1.41 silent"},{"path":"/reference/convert_tier_to_silences.html","id":"praat-source-code","dir":"Reference","previous_headings":"","what":"Praat source code","title":"Convert a textgrid tier into a ","text":"[tg_data$tier_num == 2, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")]: R:tg_data$tier_num%20==%202,%20c(%22tier_name%22,%20%22xmin%22,%20%22xmax%22,%20%22text%22) [tg_data2$tier_num == 2, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")]: R:tg_data2$tier_num%20==%202,%20c(%22tier_name%22,%20%22xmin%22,%20%22xmax%22,%20%22text%22)","code":"# <wrapped_praat_script>  # <returning: last-argument>  form Convert annotations into \"silence\" and \"sounding\"    sentence Textgrid_in    sentence Target_tier phones    sentence Silence_regex ^$|sil|sp    sentence Textgrid_out  endform    Read from file: textgrid_in$    @findNumberForTier: target_tier$    Replace interval texts:  ... findNumberForTier.result, 1, 0,  ... silence_regex$, \"silent\", \"Regular Expressions\"    Replace interval texts:  ... findNumberForTier.result, 1, 0,  ... \"^((?!silent).)*$\", \"sounding\", \"Regular Expressions\"    Save as text file: textgrid_out$    # Find the number of the (last) tier with a given name  procedure findNumberForTier: .target_tier$    .tiers = Get number of tiers    .result = 0      for .tier_i to .tiers      .tier_i_name$ = Get tier name: .tier_i        if .tier_i_name$ == .target_tier$          .result = .tier_i        endif    endfor    endproc"},{"path":"/reference/create_silences_textgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a silences textgrid ‚Äî create_silences_textgrid","title":"Create a silences textgrid ‚Äî create_silences_textgrid","text":"Create silences textgrid","code":""},{"path":"/reference/create_silences_textgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a silences textgrid ‚Äî create_silences_textgrid","text":"","code":"create_silences_textgrid"},{"path":"/reference/create_silences_textgrid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a silences textgrid ‚Äî create_silences_textgrid","text":"Praat script wav_file_in path wave read textgrid_out path textgrid file create","code":""},{"path":"/reference/create_silences_textgrid.html","id":"example-usage","dir":"Reference","previous_headings":"","what":"Example usage","title":"Create a silences textgrid ‚Äî create_silences_textgrid","text":"","code":"library(tjm.praat) library(purrr) library(readtextgrid)  # Use the PATH to find praat praat_path <- Sys.which(\"praat\")  # Locate some wav files  dir <- system.file(\"test-wavs-a/\", package = \"tjm.praat\") wavs <- list.files(dir, pattern = \".wav\", full.names = TRUE)  # Put the resulting textgrids into a temporary folder tgs <- file.path(tempdir(), basename(set_textgrid_ext(wavs)))  f_create_silences_textgrid <- wrap_praat_script(   praat_location = praat_path,   script_code_to_run = create_silences_textgrid,   return = \"last-argument\" )  # Apply the function to each wav file and read into R map2_chr(wavs, tgs, f_create_silences_textgrid) %>%   map_df(read_textgrid) #> # A tibble: 6 x 10 #>   file        tier_num tier_name tier_type tier_xmin tier_xmax  xmin  xmax text  #>   <chr>          <dbl> <chr>     <chr>         <dbl>     <dbl> <dbl> <dbl> <chr> #> 1 the_B.Text~        1 silences  Interval~         0       0.6 0     0.464 soun~ #> 2 the_B.Text~        1 silences  Interval~         0       0.6 0.464 0.6   sile~ #> 3 the_D.Text~        1 silences  Interval~         0       0.6 0     0.464 soun~ #> 4 the_D.Text~        1 silences  Interval~         0       0.6 0.464 0.6   sile~ #> 5 the_V.Text~        1 silences  Interval~         0       0.6 0     0.464 soun~ #> 6 the_V.Text~        1 silences  Interval~         0       0.6 0.464 0.6   sile~ #> # i 1 more variable: annotation_num <int>"},{"path":"/reference/create_silences_textgrid.html","id":"praat-source-code","dir":"Reference","previous_headings":"","what":"Praat source code","title":"Create a silences textgrid ‚Äî create_silences_textgrid","text":"","code":"# <wrapped_praat_script>  # <returning: last-argument>  form Make silence textgrid      sentence Wav_file_in      sentence Textgrid_out  endform  Read from file: wav_file_in$  To TextGrid (silences): 100, 0, -25, 0.1, 0.1, \"silent\", \"sounding\"  Save as text file: textgrid_out$"},{"path":"/reference/duplicate_tier.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate a textgrid tier ‚Äî duplicate_tier","title":"Duplicate a textgrid tier ‚Äî duplicate_tier","text":"Duplicate (rename) textgrid tier.","code":""},{"path":"/reference/duplicate_tier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate a textgrid tier ‚Äî duplicate_tier","text":"","code":"duplicate_tier"},{"path":"/reference/duplicate_tier.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Duplicate a textgrid tier ‚Äî duplicate_tier","text":"Praat script textgrid_in path textgrid file read target_tier tier copy duplicate_name name use duplicated tier duplicate_position place new tier: last (default), first, original. textgrid_out path textgrid file create","code":""},{"path":"/reference/duplicate_tier.html","id":"example-usage","dir":"Reference","previous_headings":"","what":"Example usage","title":"Duplicate a textgrid tier ‚Äî duplicate_tier","text":"","code":"library(tjm.praat)  # Use the PATH to find praat praat_path <- Sys.which(\"praat\")  tg <- system.file(   \"demo-textgrids/merge-duplicate-intervals.TextGrid\",   package = \"tjm.praat\" )  tg_out <- tempfile(\"test\", fileext = \".TextGrid\")  # Note that there are three tiers tg |>    readtextgrid::read_textgrid() |>    magrittr::extract(c(\"tier_num\", \"tier_name\")) |>    unique() #> # A tibble: 3 x 2 #>   tier_num tier_name #>      <dbl> <chr>     #> 1        1 words     #> 2        2 phones    #> 3        3 silence  f_duplicate_tier <- wrap_praat_script(   praat_location = praat_path,   script_code_to_run = duplicate_tier,   return = \"last-argument\" )  tg_out <- tg |>    f_duplicate_tier(\"phones\", \"duplicate-is-first\", \"first\", tg_out) |>    f_duplicate_tier(\"phones\", \"duplicate-is-last\", \"last\", tg_out) |>    f_duplicate_tier(\"phones\", \"duplicate-is-after\", \"after\", tg_out) |>    f_duplicate_tier(\"phones\", \"duplicate-is-before\", \"before\", tg_out)  # We duplicated \"phones\" four times and  # placed the copy into separate locations tg_out |>    readtextgrid::read_textgrid() |>    magrittr::extract(c(\"tier_num\", \"tier_name\")) |>    unique() #> # A tibble: 7 x 2 #>   tier_num tier_name           #>      <dbl> <chr>               #> 1        1 duplicate-is-first  #> 2        2 words               #> 3        3 duplicate-is-before #> 4        4 phones              #> 5        5 duplicate-is-after  #> 6        6 silence             #> 7        7 duplicate-is-last"},{"path":"/reference/duplicate_tier.html","id":"praat-source-code","dir":"Reference","previous_headings":"","what":"Praat source code","title":"Duplicate a textgrid tier ‚Äî duplicate_tier","text":"","code":"# <wrapped_praat_script>  # <returning: last-argument>  form Duplicate a TextGrid tier    sentence Textgrid_in    sentence Target_tier phones    sentence Duplicate_name phones2    choice Duplicate_position: 1      button last      button first      button before      button after    sentence Textgrid_out  endform    Read from file: textgrid_in$    # Find and duplicate tier  @findNumberForTier: target_tier$  tiers = Get number of tiers  @setDuplicatePosition: duplicate_position$, findNumberForTier.result, tiers    Duplicate tier:  ... findNumberForTier.result,  ... setDuplicatePosition.result,  ... duplicate_name$    Save as text file: textgrid_out$      procedure setDuplicatePosition: .position$, .current_num, .total_tiers      if .position$ = \"last\"          .result = .total_tiers + 1      endif        if .position$ = \"first\"          .result = 1      endif        if .position$ = \"before\"          .result = .current_num      endif        if .position$ = \"after\"          .result = .current_num + 1      endif  endproc    # Find the number of the (last) tier with a given name  procedure findNumberForTier: .target_tier$    .tiers = Get number of tiers    .result = 0      for .tier_i to .tiers      .tier_i_name$ = Get tier name: .tier_i        if .tier_i_name$ == .target_tier$          .result = .tier_i        endif    endfor    endproc"},{"path":"/reference/get_praat_form.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the form from a Praat script ‚Äî get_praat_form","title":"Extract the form from a Praat script ‚Äî get_praat_form","text":"Extract form Praat script","code":""},{"path":"/reference/get_praat_form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the form from a Praat script ‚Äî get_praat_form","text":"","code":"get_praat_form(x)"},{"path":"/reference/get_praat_form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the form from a Praat script ‚Äî get_praat_form","text":"x single string (Praat script)","code":""},{"path":"/reference/get_praat_form.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the form from a Praat script ‚Äî get_praat_form","text":"lines text form endform","code":""},{"path":"/reference/get_praat_form.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the form from a Praat script ‚Äî get_praat_form","text":"","code":"get_praat_form(duplicate_tier) #> form Duplicate a TextGrid tier #>   sentence Textgrid_in #>   sentence Target_tier phones #>   sentence Duplicate_name phones2 #>   choice Duplicate_position: 1 #>     button last #>     button first #>     button before #>     button after #>   sentence Textgrid_out #> endform"},{"path":"/reference/merge_duplicate_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge duplicated interval labels ‚Äî merge_duplicate_intervals","title":"Merge duplicated interval labels ‚Äî merge_duplicate_intervals","text":"successive intervals label, merged together.","code":""},{"path":"/reference/merge_duplicate_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge duplicated interval labels ‚Äî merge_duplicate_intervals","text":"","code":"merge_duplicate_intervals"},{"path":"/reference/merge_duplicate_intervals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Merge duplicated interval labels ‚Äî merge_duplicate_intervals","text":"Praat script textgrid_in path textgrid file read target_tier tier update textgrid_out path textgrid file create","code":""},{"path":"/reference/merge_duplicate_intervals.html","id":"example-usage","dir":"Reference","previous_headings":"","what":"Example usage","title":"Merge duplicated interval labels ‚Äî merge_duplicate_intervals","text":"","code":"library(tjm.praat)  # Use the PATH to find praat praat_path <- Sys.which(\"praat\")  # This example textgrid has back-to-back sounding/silence labels tg <- system.file(   \"demo-textgrids/merge-duplicate-intervals.TextGrid\",   package = \"tjm.praat\" )  tg_data <- readtextgrid::read_textgrid(tg) tg_data[tg_data$tier_num == 3, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")] #> # A tibble: 9 x 4 #>   tier_name  xmin  xmax text     #>   <chr>     <dbl> <dbl> <chr>    #> 1 silence    0     0.25 silent   #> 2 silence    0.25  0.49 sounding #> 3 silence    0.49  0.52 sounding #> 4 silence    0.52  0.55 silent   #> 5 silence    0.55  0.59 sounding #> 6 silence    0.59  1.04 sounding #> 7 silence    1.04  1.16 sounding #> 8 silence    1.16  1.39 silent   #> 9 silence    1.39  1.41 silent  # Set path tg_out <- tempfile(\"test\", fileext = \".TextGrid\")  f_merge_duplicate_intervals <- wrap_praat_script(   praat_location = praat_path,   script_code_to_run = merge_duplicate_intervals,   return = \"last-argument\" )  tg_data2 <- f_merge_duplicate_intervals(tg, \"silence\", tg_out) |>   readtextgrid::read_textgrid()  tg_data2[tg_data2$tier_num == 3, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")] #> # A tibble: 5 x 4 #>   tier_name  xmin  xmax text     #>   <chr>     <dbl> <dbl> <chr>    #> 1 silence    0     0.25 silent   #> 2 silence    0.25  0.52 sounding #> 3 silence    0.52  0.55 silent   #> 4 silence    0.55  1.16 sounding #> 5 silence    1.16  1.41 silent"},{"path":"/reference/merge_duplicate_intervals.html","id":"praat-source-code","dir":"Reference","previous_headings":"","what":"Praat source code","title":"Merge duplicated interval labels ‚Äî merge_duplicate_intervals","text":"[tg_data$tier_num == 3, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")]: R:tg_data$tier_num%20==%203,%20c(%22tier_name%22,%20%22xmin%22,%20%22xmax%22,%20%22text%22) [tg_data2$tier_num == 3, c(\"tier_name\", \"xmin\", \"xmax\", \"text\")]: R:tg_data2$tier_num%20==%203,%20c(%22tier_name%22,%20%22xmin%22,%20%22xmax%22,%20%22text%22)","code":"# <wrapped_praat_script>  # <returning: last-argument>  form Merge duplicated interval labels    sentence Textgrid_in    sentence Target_tier silence    sentence Textgrid_out  endform    Read from file: textgrid_in$  @findNumberForTier: target_tier$    @labelMerger: \"initialize\", findNumberForTier.result    while labelMerger.has_next      @labelMerger: \"merge-or-step\", findNumberForTier.result  endwhile    Save as text file: textgrid_out$      # Object for merging duplicated textgrid interval labels  procedure labelMerger: .method$, .tier_number      if .method$ = \"initialize\"        .current_position = 1    endif      if .method$ = \"merge-or-step\"      .can_merge = .current_label$ == .next_label$      if .can_merge == 1        Remove right boundary: .tier_number, .current_position        Set interval text: .tier_number, .current_position, .current_label$      else        .current_position = .current_position + 1      endif    endif        if .method$ = \"has_next\"      # .has_next is updated whenever procedure is invoked    endif      .intervals = Get number of intervals: .tier_number    .current_label$ = Get label of interval: .tier_number, .current_position      if .current_position < .intervals      .has_next = 1      .next_label$ = Get label of interval: .tier_number, .current_position + 1    else      .has_next = 0    endif    endproc    # Find the number of the (last) tier with a given name  procedure findNumberForTier: .target_tier$    .tiers = Get number of tiers    .result = 0      for .tier_i to .tiers      .tier_i_name$ = Get tier name: .tier_i        if .tier_i_name$ == .target_tier$          .result = .tier_i        endif    endfor    endproc"},{"path":"/reference/set_textgrid_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the file-extension in a path to .TextGrid ‚Äî set_textgrid_ext","title":"Set the file-extension in a path to .TextGrid ‚Äî set_textgrid_ext","text":"Set file-extension path .TextGrid","code":""},{"path":"/reference/set_textgrid_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the file-extension in a path to .TextGrid ‚Äî set_textgrid_ext","text":"","code":"set_textgrid_ext(xs)"},{"path":"/reference/set_textgrid_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the file-extension in a path to .TextGrid ‚Äî set_textgrid_ext","text":"xs paths filenames","code":""},{"path":"/reference/set_textgrid_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the file-extension in a path to .TextGrid ‚Äî set_textgrid_ext","text":"paths extensions replaced .TextGrid","code":""},{"path":"/reference/set_textgrid_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the file-extension in a path to .TextGrid ‚Äî set_textgrid_ext","text":"","code":"set_textgrid_ext(\"C:/Programs/Nullsoft/Winamp/Demo.mp3\") #> [1] \"C:/Programs/Nullsoft/Winamp/Demo.TextGrid\""},{"path":"/reference/wrap_praat_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a function that runs a Praat script ‚Äî wrap_praat_script","title":"Make a function that runs a Praat script ‚Äî wrap_praat_script","text":"Make function runs Praat script","code":""},{"path":"/reference/wrap_praat_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a function that runs a Praat script ‚Äî wrap_praat_script","text":"","code":"wrap_praat_script(   praat_location,   script_code_to_run,   return = c(\"last-argument\", \"info-window\") )"},{"path":"/reference/wrap_praat_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a function that runs a Praat script ‚Äî wrap_praat_script","text":"praat_location path Praat executable script_code_to_run Praat script run return value return. \"last-argument\" returns last argument Praat script. \"info-window\" returns contents Praat Info Window.","code":""},{"path":"/reference/wrap_praat_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a function that runs a Praat script ‚Äî wrap_praat_script","text":"see return argument","code":""},{"path":"/reference/wrap_praat_script.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a function that runs a Praat script ‚Äî wrap_praat_script","text":"function basically sets call Praat's command-line interface using system2().","code":""}]
